const express = require("express");
const app = express();
const http = require("http");
const server = http.createServer(app);
const { Server } = require("socket.io");
const io = new Server(server);
const path = require("path");
const cron = require("node-cron");
const db = require("./utils/db");
const axios = require("axios");
require("dotenv").config();

// ‚úÖ Middleware ‡∏Å‡πà‡∏≠‡∏ô static
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// ‚úÖ Routes
const authRoutes = require("./routes/auth");
const productRouter = require("./routes/products")(io);
const bidsRoute = require("./routes/bids");
const coinRoutes = require("./routes/coins");
const confirmRouter = require("./routes/confirm");
const aiRouter = require("./routes/ai");

app.use("/api/auth", authRoutes);
app.use("/api/products", productRouter);
app.use("/api/bids", bidsRoute);
app.use("/api/coins", coinRoutes);
app.use("/api/confirm", confirmRouter);
app.use("/api/ai", aiRouter);

// ‚úÖ static ‡∏Ñ‡∏ß‡∏£‡∏≠‡∏¢‡∏π‡πà‡∏ó‡πâ‡∏≤‡∏¢‡∏™‡∏∏‡∏î (‡∏´‡∏•‡∏±‡∏á API)
app.use(express.static(path.join(__dirname, "donbid-main")));
app.get("/favicon.ico", (req, res) => res.status(204)); // no content
app.use("/uploads", express.static(path.join(__dirname, "uploads")));

app.get("/", (req, res) => {
  res.sendFile(path.join(__dirname, "donbid-main", "content", "main.html"));
});

cron.schedule("* * * * *", async () => {
  const now = new Date();

  try {
    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï upcoming ‚Üí live
    await db.query(
      `UPDATE products 
       SET status = 'live' 
       WHERE status = 'upcoming' AND start_time <= ?`,
      [now]
    );

    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï live ‚Üí ended + ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•
    const [liveProducts] = await db.query(
      `SELECT id FROM products WHERE status = 'live' AND end_time <= ?`,
      [now]
    );

    for (const p of liveProducts) {
      const [bids] = await db.query(
        "SELECT user_id, bid_price FROM bids WHERE product_id = ? ORDER BY bid_price DESC, created_at DESC LIMIT 1",
        [p.id]
      );

      if (bids.length > 0) {
        await db.query(
          "INSERT INTO auction_results (product_id, winner_user_id, final_price, closed_at) VALUES (?, ?, ?, ?)",
          [p.id, bids[0].user_id, bids[0].bid_price, now]
        );
      }

      await db.query('UPDATE products SET status = "ended" WHERE id = ?', [
        p.id,
      ]);
    }

    console.log(`[CRON] ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ${now}`);
  } catch (err) {
    console.error("‚ùå CRON error:", err);
  }
});

async function callAIAndBroadcast(productId, userMsg, eventName) {
  try {
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß (routes/ai.js)
    const response = await axios.post(`http://localhost:3000/api/ai/chat`, {
      message: userMsg,
      product_id: productId,
    });

    const reply = response.data.reply;

    // ‚úÖ broadcast ‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å client ‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ
    io.to(productId).emit(eventName, { productId, message: reply });

    console.log(`üëâ AI Broadcast (${eventName}): ${reply}`);
  } catch (err) {
    console.error("‚ùå AI call failed:", err.response?.data || err.message);
  }
}

// ‡πÄ‡∏Å‡πá‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏ï‡∏≤‡∏° productId
const participants = {};
const welcomedProducts = {};
const auctionEndTimes = {};
const idleTimers = {};

io.on("connection", (socket) => {
  console.log("üîó Client connected");

  // ‡πÄ‡∏ß‡∏•‡∏≤ user ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•
  socket.on("join auction", async ({ productId, userId, username }) => {
    socket.join(productId);

    if (!participants[productId]) {
      participants[productId] = [];
    }

    // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥
    if (!participants[productId].some((u) => u.userId === userId)) {
      participants[productId].push({ id: socket.id, userId, username });
    }

    if (!welcomedProducts[productId]) {
      welcomedProducts[productId] = true; // ‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á prompt
      const [rows] = await db.query("SELECT * FROM products WHERE id = ?", [
        productId,
      ]);
      const product = rows[0];

      const welcomePrompt = `‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏• ‡∏ä‡πà‡∏ß‡∏¢‡∏Å‡∏•‡πà‡∏≤‡∏ß‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏ö‡∏ö‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡πÑ‡∏°‡πà‡∏û‡∏π‡∏î‡∏ñ‡∏∂‡∏á AI ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏©:\n
        ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: ${product.name}\n
        ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${product.description}\n
        ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: ${product.start_price} ‡∏ö‡∏≤‡∏ó`;

      callAIAndBroadcast(productId, welcomePrompt, "auction welcome");

      resetIdleTimer(productId);
    }

    if (!auctionEndTimes[productId]) {
      auctionEndTimes[productId] = Date.now() + 120 * 1000;
    }

    // ‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å client ‡πÉ‡∏ô auction ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
    io.to(productId).emit("participants update", {
      productId,
      participants: participants[productId],
    });

    socket.emit("auction endtime", {
      productId,
      endTime: auctionEndTimes[productId],
      reason: "join",
    });
  });

  socket.on("bid placed", (data) => {
    const { productId, username, bidAmount } = data;

    // ‡∏ï‡πà‡∏≠‡πÄ‡∏ß‡∏•‡∏≤ 60 ‡∏ß‡∏¥
    auctionEndTimes[productId] = Date.now() + 60 * 1000;

    io.to(productId).emit("auction endtime", {
      productId,
      endTime: auctionEndTimes[productId],
      reason: "bid",
    });

    io.to(productId).emit("new bid", data); // update UI

    const promptBid = `‡πÅ‡∏à‡πâ‡∏á‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏ó‡∏£‡∏≤‡∏ö‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏¢‡∏≤‡∏ß‡∏°‡∏≤‡∏Å ${username} ‡πÄ‡∏û‡∏¥‡πà‡∏á‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤ ${bidAmount} ‡∏ö‡∏≤‡∏ó ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ ‡πÅ‡∏ö‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏£‡∏∞‡∏ï‡∏∏‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏ï‡∏∑‡πà‡∏ô‡πÄ‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏©`;
    // AI ‡∏ï‡∏≠‡∏ö message bid
    callAIAndBroadcast(productId, promptBid, "ai message"); // ‚úÖ ‡∏™‡πà‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ

    // üõ† ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï idle timer
    resetIdleTimer(productId);
  });

  // ‡πÄ‡∏ß‡∏•‡∏≤ user ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á (disconnect)
  socket.on("disconnect", () => {
    for (const pid in participants) {
      const before = participants[pid].length;
      participants[pid] = participants[pid].filter((u) => u.id !== socket.id);

      if (participants[pid].length !== before) {
        io.to(pid).emit("participants update", {
          productId: pid,
          participants: participants[pid],
        });
      }
    }
    console.log("‚ùå Client disconnected", socket.id);
  });
});

async function sendIdleMessage(productId) {
  try {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    const [products] = await db.query("SELECT * FROM products WHERE id = ?", [
      productId,
    ]);
    const product = products[0];
    if (!product) return;

    // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    const [bids] = await db.query(
      "SELECT MAX(bid_price) AS highest FROM bids WHERE product_id = ?",
      [productId]
    );
    const highestBid = bids[0] || { highest: null };

    const prompt =
      "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡∏ä‡πà‡∏ß‡∏¢‡∏Å‡∏£‡∏∞‡∏ï‡∏∏‡πâ‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏ó‡∏µ‡πà‡∏™‡∏±‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡πÑ‡∏°‡πà‡∏û‡∏π‡∏î‡∏ñ‡∏∂‡∏á AI ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏©:\n" +
      `‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: ${product.name}\n` +
      `‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${product.description}\n` +
      `‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: ${product.start_price} ‡∏ö‡∏≤‡∏ó\n` +
      `‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${highestBid.highest || product.start_price} ‡∏ö‡∏≤‡∏ó`;

    await callAIAndBroadcast(productId, prompt, "ai message");
  } catch (err) {
    console.error("sendIdleMessage error:", err);
  }
}

async function sendCloseMessage(productId) {
  try {
    // ‡∏î‡∏∂‡∏á‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const [results] = await db.query(
      "SELECT r.final_price, u.username AS winner_name, r.winner_user_id FROM auction_results r JOIN users u ON r.winner_user_id = u.id WHERE r.product_id = ? ORDER BY r.closed_at DESC LIMIT 1",
      [productId]
    );
    const result = results[0];

    if (!result) {
      await callAIAndBroadcast(
        productId,
        "‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏∞ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞",
        "ai message"
      );
      return;
    }

    const { winner_name, final_price } = result;

    const prompt = `‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏£‡∏≤‡∏ö‡∏ß‡πà‡∏≤"‡∏Ç‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏Å‡∏±‡∏ö ${winner_name} ‡∏ó‡∏µ‡πà‡∏ä‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤ ${final_price} ‡∏ö‡∏≤‡∏ó!" ‡πÅ‡∏ö‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡πÑ‡∏°‡πà‡∏û‡∏π‡∏î‡∏ñ‡∏∂‡∏á AI ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏û‡∏¥‡πÄ‡∏®‡∏©`;

    await callAIAndBroadcast(productId, prompt, "ai message");
  } catch (err) {
    console.error("sendCloseMessage error:", err);
  }
}
function resetIdleTimer(productId) {
  if (participants[productId].idleTimer) {
    clearTimeout(participants[productId].idleTimer);
  }

  participants[productId].idleTimer = setTimeout(() => {
    sendIdleMessage(productId);
  }, 30 * 1000);
}


setInterval(async () => {
  const now = Date.now();
  for (const productId in auctionEndTimes) {
    const endTime = auctionEndTimes[productId];

    // ‚è≥ ‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤ ‚Üí Close
    if (now >= endTime) {
      await sendCloseMessage(productId);
      delete auctionEndTimes[productId];
      delete participants[productId];
      delete welcomedProducts[productId];
      continue;
    }
  }
}, 3000);

server.listen(3000, () => {
  console.log("‚úÖ Server started on http://localhost:3000");
});
