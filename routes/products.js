const express = require('express');
const router = express.Router();
const db = require('../utils/db');
const authMiddleware = require('../middlewares/auth'); // ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ middleware ‡∏ï‡∏£‡∏ß‡∏à token

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
const upload = require('../middlewares/upload');

router.post(
  '/',
  authMiddleware,
  upload.array('images', 5), // <-- ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡∏ä‡∏∑‡πà‡∏≠ images[]
  async (req, res) => {
    const user = req.user;
    const { name, category, description, start_price, start_time, end_time } = req.body;

    if (user.role !== 'seller') return res.status(403).json({ message: '‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ú‡∏π‡πâ‡∏Ç‡∏≤‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ' });

    if (!name || !category || !description || !start_price || !start_time || !end_time)
      return res.status(400).json({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' });

    const conn = await db.getConnection();

    try {
      await conn.beginTransaction();

      const [result] = await conn.query(
        `INSERT INTO products (name, category, description, start_price, start_time, end_time, status, created_by)
         VALUES (?, ?, ?, ?, ?, ?, 'upcoming', ?)`,
        [name, category, description, start_price, start_time, end_time, user.id]
      );

      const productId = result.insertId;

      if (req.files && req.files.length > 0) {
        const values = req.files.map(file => [productId, file.filename]);
        await conn.query(
          `INSERT INTO product_images (product_id, image_path) VALUES ?`,
          [values]
        );
      }

      await conn.commit();
      res.json({ message: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
    } catch (err) {
      await conn.rollback();
      console.error(err);
      res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤' });
    } finally {
      conn.release();
    }
  }
);


router.get('/', async (req, res) => {
  try {
    const [rows] = await db.query(`
      SELECT 
        p.*, 
        COALESCE(
          (SELECT MAX(b.bid_price) FROM bids b WHERE b.product_id = p.id),
          p.start_price
        ) AS current_price
      FROM products p
      WHERE p.status = 'upcoming'
      ORDER BY p.start_time DESC
      LIMIT 10
    `);

    // üîÅ ‡∏î‡∏∂‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    const productsWithImages = await Promise.all(rows.map(async (product) => {
      const [images] = await db.query(
        `SELECT image_path FROM product_images WHERE product_id = ?`,
        [product.id]
      );
      return {
        ...product,
        images: images.map(img => img.image_path)
      };
    }));
    res.json(productsWithImages);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î' });
  }
});


// products.js (‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏ü‡∏•‡πå router ‡∏ó‡∏µ‡πà‡∏î‡∏π‡πÅ‡∏• endpoint /api/products/:id)
router.get('/:id', async (req, res) => {
  const { id } = req.params;
  try {
    const [rows] = await db.query(`
      SELECT 
        p.*, 
        u.username AS seller_username
      FROM products p
      JOIN users u ON p.created_by = u.id
      WHERE p.id = ?
    `, [id]);

    if (rows.length === 0) {
      return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤' });
    }

    res.json(rows[0]);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î' });
  }
});



// ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏•‡∏á auction_results
router.post('/close/:id', authMiddleware, async (req, res) => {
  const productId = req.params.id;
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î
    const [products] = await db.query('SELECT * FROM products WHERE id = ? AND status != "ended"', [productId]);
    if (products.length === 0) {
      return res.status(404).json({ message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß' });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡πÉ‡∏ô auction_results ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    const [results] = await db.query('SELECT * FROM auction_results WHERE product_id = ?', [productId]);
    if (results.length > 0) {
      // ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ã‡πâ‡∏≥
      return res.json({ message: '‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞‡πÅ‡∏•‡πâ‡∏ß', winner_user_id: results[0].winner_user_id, final_price: results[0].final_price });
    }

    // ‡∏´‡∏≤‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏• (bid ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î)
    const [bids] = await db.query('SELECT user_id, bid_price FROM bids WHERE product_id = ? ORDER BY bid_price DESC, created_at DESC LIMIT 1', [productId]);
    if (bids.length === 0) {
      // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤
      await db.query('UPDATE products SET status = "ended" WHERE id = ?', [productId]);
      return res.json({ message: '‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ú‡∏π‡πâ‡∏ä‡∏ô‡∏∞' });
    }
    const winnerUserId = bids[0].user_id;
    const finalPrice = bids[0].bid_price;
    const closedAt = new Date();

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á auction_results
    await db.query(
      'INSERT INTO auction_results (product_id, winner_user_id, final_price, closed_at) VALUES (?, ?, ?, ?)',
      [productId, winnerUserId, finalPrice, closedAt]
    );
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    await db.query('UPDATE products SET status = "ended" WHERE id = ?', [productId]);

    res.json({ message: '‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', winner_user_id: winnerUserId, final_price: finalPrice });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏π‡∏•' });
  }
});

module.exports = router;

